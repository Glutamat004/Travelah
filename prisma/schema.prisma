// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum LikeType {
  LIKE
  DONTLIKE
}

enum ChatType {
  SPOTWISATA
  KEGIATAN
  // TO BE ADDED
}

model User {
  id            Int            @id @unique @default(autoincrement())
  email         String         @unique
  password      String
  refreshTokens RefreshToken[] @relation("UserRefreshToken")
  like          Like[]         @relation("UserLikes")
  post          Post[]         @relation("UserPosts")
  comment       Comment[]      @relation("UserComments")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {   // gausah pake, tokennya dilamain
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  user        User     @relation("UserRefreshToken", fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int       @id @unique @default(autoincrement())
  userId      Int
  user        User      @relation("UserPosts",fields: [userId], references: [id], onDelete: Cascade)
  description String   //jangan string gini, karena nanti maks 255
  location    String
  likeCount   Int       @default(0)  //likeCOuntnya jangan gini, gausah dibikin jadi atribut aja, jadi waktu dibutuhin aja baru ngitung like
  likes       Like[]    @relation("PostLikes")
  commentCount   Int       @default(0)
  comments     Comment[]    @relation("PostComments")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id          Int       @id @unique @default(autoincrement())
  userId      Int
  user        User      @relation("UserLikes",fields: [userId], references: [id], onDelete: Cascade)
  likeType    LikeType
  postId      Int
  post        Post      @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          Int       @id @unique @default(autoincrement())
  description String
  userId      Int
  user        User      @relation("UserComments",fields: [userId], references: [id], onDelete: Cascade)
  postId      Int
  post        Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Chat {
  id          Int       @id @unique @default(autoincrement())
  topicId    Int
  topic      Topic      @relation("chatTopics", fields: [topicId], references: [id], onDelete: Cascade)
  question    String
  response			String
  type         ChatType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookmarked  Boolean
}

model Topic {
  id          Int       @id @unique @default(autoincrement())
  chats       Chat[]    @relation("chatTopics")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
